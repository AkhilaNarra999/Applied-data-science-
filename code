# -*- coding: utf-8 -*-
"""
Created on Thu Nov 9 12:14:50 2023

@author: Akhila
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def plot_multiple_y_axes(df, x_column, y_columns, colors):
    """
    Create a line chart with multiple y-axes to visualize data.

    Parameters:
    df (DataFrame): The DataFrame containing the data.
    x_column (str): The column to use as the x-axis.
    y_columns (list of str): List of column names to plot on the y-axes.
    colors (list of str): List of colors for each line on the plot.
    """
    fig, ax1 = plt.subplots(figsize=(10, 6))

    ax1.plot(df[x_column], df[y_columns[0]], marker='o',
             linestyle='-', color=colors[0], label=f"{y_columns[0]}")
    ax1.set_xlabel(x_column)
    ax1.set_ylabel(y_columns[0], color=colors[0])

    lines = [ax1]

    for i in range(1, len(y_columns)):
        ax = ax1.twinx()
        ax.plot(df[x_column], df[y_columns[i]], marker='o',
                linestyle='-', color=colors[i], label=f"{y_columns[i]}")
        ax.set_ylabel(y_columns[i], color=colors[i])
        ax.spines['right'].set_position(('outward', 60 * i))
        lines.append(ax)

    plt.title("Line Chart with Multiple Y-Axes")

    all_lines, all_labels = [], []
    for ax in [ax1] + [ax1.twinx() for _ in y_columns]:
        lns, lbs = ax.get_legend_handles_labels()
        all_lines.extend(lns)
        all_labels.extend(lbs)

    ax1.legend(all_lines, all_labels, loc='upper right')


def plot_billionaires_by_age(data):
    """
    Create a horizontal bar chart to visualize the ages of the top 10 billionaires.

    Parameters:
    data (DataFrame): The DataFrame containing billionaire data.
    """
    colors = plt.cm.Paired(np.arange(len(data)))
    plt.figure(figsize=(10, 6))
    bars = plt.barh(data['personName'], data['age'], color=colors)
    plt.xlabel('Age')
    plt.ylabel('Person Name')
    plt.title('Top 10 Billionaires by Age')
    plt.gca().invert_yaxis()

    for bar in bars:
        plt.text(
            bar.get_width() + 1,
            bar.get_y() + bar.get_height() / 2,
            f'{int(bar.get_width())} years',
            va='center',
            fontsize=10)

    plt.grid(axis='x', linestyle='--', alpha=0.6)
    plt.show()


def plot_category_distribution(data, category_mapping):
    """
    Create a pie chart to visualize the distribution of billionaires by category.

    Parameters:
    data (DataFrame): The DataFrame containing category data.
    category_mapping (dict): Mapping of categories to extended categories.
    """
    data['category'] = data['category'].map(category_mapping)
    category_counts = data['category'].value_counts()

    colors = plt.cm.Paired(range(len(category_counts)))
    plt.figure(figsize=(8, 8))
    plt.pie(
        category_counts,
        labels=category_counts.index,
        autopct='%1.1f%%',
        startangle=140,
        colors=colors)
    plt.title('Category Distribution of Billionaires')
    plt.legend(category_counts.index, loc='upper right')
    plt.show()


# Read the CSV file and specify the encoding
df = pd.read_csv(
    "Billionaires Statistics Dataset.csv",
    encoding="latin1",
    nrows=5)

# Select the common x-axis column
x_column = 'personName'

# Select the y-axis columns you want to plot
y_column1 = 'finalWorth'
y_column2 = 'age'
y_column3 = 'total_tax_rate_country'
y_column4 = 'gdp_country'

# Define custom colors for each line
colors = ['b', 'r', 'g', 'purple']

# Create the line chart
plot_multiple_y_axes(
    df, x_column, [
        y_column1, y_column2, y_column3, y_column4], colors)

# Define data for the bar chart
bar_data = pd.DataFrame(
    {
        'personName': [
            'Bernard Arnault & family',
            'Elon Musk',
            'Jeff Bezos',
            'Larry Ellison',
            'Warren Buffett',
            'Bill Gates',
            'Michael Bloomberg',
            'Carlos Slim Helu & family',
            'Mukesh Ambani',
            'Steve Ballmer'],
        'age': [
            74,
            51,
            59,
            78,
            92,
            67,
            81,
            83,
            65,
            67]})

# Define data for the category distribution pie chart
category_data = pd.DataFrame(
    {
        'category': [
            'Technology',
            'Finance & Investments',
            'Automotive',
            'Technology',
            'Fashion & Retail',
            'Automotive',
            'Technology',
            'Fashion & Retail',
            'Finance & Investments',
            'Technology']})

category_mapping = {
    'Automotive': 'Automotive',
    'Construction & Engineering': 'Construction & Engineering',
    'Diversified': 'Diversified',
    'Energy': 'Energy',
    'Fashion & Retail': 'Fashion & Retail',
    'Finance & Investments': 'Finance & Investments',
    'Food & Beverage': 'Food & Beverage',
    'Gambling & Casinos': 'Gambling & Casinos',
    'Healthcare': 'Healthcare',
    'Logistics': 'Logistics',
    'Manufacturing': 'Manufacturing',
    'Media & Entertainment': 'Media & Entertainment',
    'Metals & Mining': 'Metals & Mining',
    'Real Estate': 'Real Estate',
    'Service': 'Service',
    'Sports': 'Sports',
    'Technology': 'Technology',
    'Telecom': 'Telecom'}

# Plot the bar chart
plot_billionaires_by_age(bar_data)

# Plot the category distribution pie chart
plot_category_distribution(category_data, category_mapping)
